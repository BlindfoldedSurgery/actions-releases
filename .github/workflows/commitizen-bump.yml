on:
  workflow_call:
    inputs:
      build-tool:
        type: string
        required: false
        default: poetry
      build-tool-version:
        type: string
        required: false
      python-version:
        type: string
        default: '3.11'
      publish-major-tag:
        type: boolean
        required: false
        default: false
    secrets:
      GH_TOKEN:
        required: true
    outputs:
      bumped:
        value: ${{ jobs.bump.outputs.bumped }}
      version:
        value: ${{ jobs.bump.outputs.version }}

jobs:
  bump:
    runs-on: ubuntu-24.04
    concurrency: release
    if: success() && github.ref_name == github.event.repository.default_branch
    env:
      # renovate: datasource=pypi depName=poetry versioning=semver-coerced
      POETRY_VERSION: 2.1.4
      # renovate: datasource=pypi depName=uv versioning=semver-coerced
      UV_VERSION: 0.8.24
    outputs:
      bumped: ${{ steps.bump.outputs.bumped }}
      version: ${{ steps.bump.outputs.version }}
    steps:
      - uses: actions/setup-python@v6
        with:
          python-version: ${{ inputs.python-version }}
      - run: pipx install poetry==${{ inputs.build-tool-version || env.POETRY_VERSION }}
        if: inputs.build-tool == 'poetry'
      - uses: actions/checkout@v5
        with:
          fetch-depth: '0'
          token: ${{ secrets.GH_TOKEN }}
      - name: Install uv
        if: inputs.build-tool == 'uv'
        uses: astral-sh/setup-uv@v6
        with:
          cache-suffix: actions-releases
          version: ${{ inputs.build-tool-version || env.UV_VERSION }}
      - run: poetry install --all-extras --no-interaction --no-ansi
        if: inputs.build-tool == 'poetry'
      - run: uv sync
        if: inputs.build-tool == 'uv'
      - run: |
          git config --global user.name "commitizen"
          git config --global user.email "commitizen@blindfolded.surgery"
      - name: Align uv lockfile
        if: inputs.build-tool == 'uv'
        run: |
          uv run cz bump --files-only || true
          uv lock
          git restore CHANGELOG.md pyproject.toml
      - name: Bump version
        id: bump
        env:
          UV_NO_SYNC: "true"
        run: |
          set +e
          ${{ inputs.build-tool }} run cz bump
          EXIT_CODE="$?"
          set -e

          case $EXIT_CODE in
          21)
            echo "bumped=false" >> "$GITHUB_OUTPUT"
            exit 0;;
          0)
            echo "bumped=true" >> "$GITHUB_OUTPUT"
            ;;
          *)
            exit $EXIT_CODE;;
          esac
          
          version=$(${{ inputs.build-tool }} run cz version --project)
          echo "version=$version" >> "$GITHUB_OUTPUT"
          major_version=$(echo "$version" | cut -d. -f1 -)
          echo "major_version=$major_version" >> "$GITHUB_OUTPUT"
      - name: Create and push major tag
        if: steps.bump.outputs.bumped == 'true' && inputs.publish-major-tag
        env:
          MAJOR_VERSION: ${{ steps.bump.outputs.major_version }}
        run: |
          git tag --force "v$MAJOR_VERSION"
          git push --force origin "v$MAJOR_VERSION"
      - name: Create PR and exact tag
        if: steps.bump.outputs.bumped == 'true'
        id: pr-create
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          VERSION: ${{ steps.bump.outputs.version }}
        run: |
          git push origin "v$VERSION"
          git switch -c bump-version
          git push --set-upstream origin bump-version
          pr_url=$(gh pr create --title "Bump to $VERSION" --body "Autogenerated PR.")
          echo "pr_url=$pr_url" >> "$GITHUB_OUTPUT"
      - name: Set PR to auto-merge
        if: steps.bump.outputs.bumped == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
          PR_URL: ${{ steps.pr-create.outputs.pr_url }}
        run: |
          gh pr merge --rebase --auto "$PR_URL"
